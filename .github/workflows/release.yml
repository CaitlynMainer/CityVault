name: Build & Release CityVault

on:
  push:
    branches:
      - dev
    tags:
      - 'v*'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-launchers:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        arch: [x64]
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        working-directory: launcher

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev @electron/packager

      - name: Package launcher (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          npx @electron/packager . cityvault-launcher \
            --platform=linux \
            --arch=${{ matrix.arch }} \
            --icon=icon.ico \
            --overwrite \
            --asar.unpack=config.json \
            --ignore="^/tests" \
            --ignore="^/docs" \
            --ignore=".*\\.map" \
            --ignore=".*\\.md" \
            --ignore="^/node_modules/(electron|.*-dev).*" \
            --ignore="^/config"
        shell: bash

      - name: Package launcher (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: >
          npx @electron/packager . cityvault-launcher
          --platform=win32
          --arch=${{ matrix.arch }}
          --icon=icon.ico
          --overwrite
          --asar.unpack=config.json
          "--ignore=^/tests"
          "--ignore=^/docs"
          "--ignore=.*\\.map"
          "--ignore=.*\\.md"
          "--ignore=^/node_modules/`(electron`|.*-dev`)`.*"
          "--ignore=^/config"

      - name: Upload Windows launcher
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: cityvault-launcher-win
          path: launcher/cityvault-launcher-win32-${{ matrix.arch }}

      - name: Upload Linux launcher
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: cityvault-launcher-linux
          path: launcher/cityvault-launcher-linux-${{ matrix.arch }}

  build-release:
    needs: build-launchers
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version string
        id: set_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
            echo "IS_TAG=true" >> $GITHUB_ENV
          else
            echo "VERSION=dev-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
            echo "IS_TAG=false" >> $GITHUB_ENV
          fi

      - name: Find previous tag
        id: prev
        run: |
          TAGS=$(git tag --sort=-creatordate | grep '^v')
          PREV=$(echo "$TAGS" | sed -n 2p)
          echo "previous_tag=$PREV" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          CURRENT_TAG="${{ github.ref_name }}"
          PREVIOUS_TAG="${{ steps.prev.outputs.previous_tag }}"

          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"

          if [ -z "$PREVIOUS_TAG" ]; then
            RANGE=""
          else
            RANGE="$PREVIOUS_TAG..$CURRENT_TAG"
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          git log $RANGE --pretty=format:"- %s" |
            grep -vEi 'update.*version\.json|bump.*version\.json|version\.json' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download Windows launcher
        uses: actions/download-artifact@v4
        with:
          name: cityvault-launcher-win
          path: launcher_downloads/cityvault-launcher-win

      - name: Download Linux launcher
        uses: actions/download-artifact@v4
        with:
          name: cityvault-launcher-linux
          path: launcher_downloads/cityvault-launcher-linux

      - name: Write version.json
        run: |
          echo "{ \"version\": \"${{ env.VERSION }}\" }" > version.json

      - name: Create combined release ZIP
        run: |
          mkdir -p dist
          zip -r "dist/cityvault-${{ env.VERSION }}.zip" . \
            -x "*.git*" \
            "node_modules/*" \
            "launcher/*" \
            "dist/*" \
            "launcher_version_tmp/*"

      - name: Debug ZIP contents
        run: unzip -l dist/cityvault-${{ env.VERSION }}.zip

      - name: Upload ZIP to GitHub Release (only on tag)
        if: env.IS_TAG == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/cityvault-${{ env.VERSION }}.zip
          name: CityVault v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          body: ${{ steps.changelog.outputs.log }}

      - name: Remove version.json
        run: rm -f version.json

      - name: Update JSON on gh-pages
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git fetch origin gh-pages
          git checkout gh-pages

          if [[ "${{ env.IS_TAG }}" == "true" ]]; then
            echo '{
              "latest": "${{ env.VERSION }}",
              "url": "https://github.com/${{ github.repository }}/releases/download/v${{ env.VERSION }}/cityvault-${{ env.VERSION }}.zip",
              "notes": "See https://github.com/${{ github.repository }}/releases/tag/v${{ env.VERSION }}"
            }' > update.json
            git add update.json
            git commit -m "Update update.json for v${{ env.VERSION }}" || echo "No changes"
          else
            echo '{ "version": "${{ env.VERSION }}" }' > dev-version.json
            git add dev-version.json
            git commit -m "Update dev-version.json for $GITHUB_SHA" || echo "No changes"
          fi

          git push origin gh-pages
