<div class="container mx-auto px-4 py-6">
  <h1 class="text-2xl font-bold mb-4">Configuration Editor</h1>

  <% if (messages && messages.success) { %>
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-2 rounded mb-4">
      <%= messages.success %>
    </div>
  <% } %>
  <% if (messages && messages.error) { %>
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded mb-4">
      <%= messages.error %>
    </div>
  <% } %>

  <form method="POST" action="/admin/config" id="configForm">
    <h2 class="text-xl font-semibold mb-2">Site Settings</h2>
    <div class="grid grid-cols-2 gap-4 mb-4">
      <div>
        <label class="block text-sm font-medium">Site Name</label>
        <input type="text" name="config[siteName]" value="<%= config.siteName %>" class="input" />
      </div>
      <div>
        <label class="block text-sm font-medium">Domain</label>
        <input type="text" name="config[domain]" value="<%= config.domain %>" class="input" />
      </div>
      <div>
        <label class="block text-sm font-medium">IP Address</label>
        <input type="text" name="config[ipAddr]" value="<%= config.ipAddr %>" class="input" />
      </div>
      <div>
        <div class="relative">
        <label class="block text-sm font-medium">Session Secret</label>
            <input
              type="password"
               name="config[session_secret]"
              value="<%= config.session_secret %>"
              class="input pr-10 toggle-password"
            />
            <button
              type="button"
              class="toggle-button absolute inset-y-0 right-2 flex items-center text-sm text-gray-400"
              tabindex="-1"
            >
              üëÅ Show
            </button>
        </div>
      </div>
    </div>

    <h2 class="text-xl font-semibold mb-2">Auth DB</h2>
    <div class="grid grid-cols-2 gap-4 mb-4">
      <% Object.keys(config.auth).forEach(function(key) { %>
        <div>
          <label class="block text-sm font-medium"><%= key %></label>
          <% if (key === 'dbPass') { %>
          <div class="relative">
            <input
              type="password"
              name="config[auth][<%= key %>]"
              value="<%= config.auth[key] %>"
              class="input pr-12 toggle-password"
            />
            <button
              type="button"
              class="toggle-button absolute inset-y-0 right-2 flex items-center text-sm text-gray-400"
              tabindex="-1"
            >
              üëÅ Show
            </button>
          </div>
          <% } else if (key === 'dbPort') { %>
            <input type="number" name="config[auth][<%= key %>]" value="<%= config.auth[key] || 1433 %>" class="input" min="1" max="65535" />
          <% } else { %>
            <input type="text" name="config[auth][<%= key %>]" value="<%= config.auth[key] %>" class="input" />
          <% } %>
        </div>
      <% }); %>
    </div>


    <h2 class="text-xl font-semibold mb-2">Chat DB</h2>
    <div class="grid grid-cols-2 gap-4 mb-4">
      <% Object.keys(config.chat).forEach(function(key) { %>
        <div>
          <label class="block text-sm font-medium"><%= key %></label>
          <% if (key === 'dbPass') { %>
            <div class="relative">
              <input
                type="password"
                name="config[chat][<%= key %>]"
                value="<%= config.chat[key] %>"
                class="input pr-10 toggle-password"
              />
            <button
              type="button"
              class="toggle-button absolute inset-y-0 right-2 flex items-center text-sm text-gray-400"
              tabindex="-1"
            >
              üëÅ Show
            </button>
            </div>
          <% } else if (key === 'dbPort') { %>
            <input type="number" name="config[chat][<%= key %>]" value="<%= config.chat[key] || 1433 %>" class="input" min="1" max="65535" />
          <% } else { %>
            <input type="text" name="config[chat][<%= key %>]" value="<%= config.chat[key] %>" class="input" />
          <% } %>
        </div>
      <% }); %>
    </div>

    <h2 class="text-xl font-semibold mb-2">Email Configuration</h2>
    <div class="grid grid-cols-2 gap-4 mb-4">
      <div>
        <label class="block text-sm font-medium">Provider</label>
        <select name="config[email][provider]" class="input" id="email-provider">
          <option value="" <%= config.email.provider === '' ? 'selected' : '' %>>Disabled</option>
          <option value="smtp" <%= config.email.provider === 'smtp' ? 'selected' : '' %>>SMTP</option>
          <option value="mailersend" <%= config.email.provider === 'mailersend' ? 'selected' : '' %>>MailerSend</option>
        </select>
      </div>
      <div>
        <label class="block text-sm font-medium">From Email</label>
        <input type="email" name="config[email][fromEmail]" value="<%= config.email.fromEmail %>" class="input" />
      </div>
    </div>

    <!-- MailerSend Fields -->
    <div id="mailersend-fields" class="mb-4">
      <h3 class="text-lg font-semibold mb-2">MailerSend</h3>
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium">API Key</label>
          <input type="text" name="config[email][mailersend][apiKey]" value="<%= config.email.mailersend?.apiKey || '' %>" class="input" />
        </div>
      </div>
    </div>

    <!-- SMTP Fields -->
    <div id="smtp-fields" class="mb-4">
      <h3 class="text-lg font-semibold mb-2">SMTP</h3>
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium">Host</label>
          <input type="text" name="config[email][smtp][host]" value="<%= config.email.smtp?.host || '' %>" class="input" />
        </div>
        <div>
          <label class="block text-sm font-medium">Port</label>
          <input type="number" name="config[email][smtp][port]" value="<%= config.email.smtp?.port || 587 %>" class="input" />
        </div>
        <div>
          <label class="block text-sm font-medium">Use TLS/SSL</label>
          <input type="checkbox" name="config[email][smtp][secure]" value="true" <%= config.email.smtp?.secure ? 'checked' : '' %> />
        </div>
        <div>
          <label class="block text-sm font-medium">Username</label>
          <input type="text" name="config[email][smtp][auth][user]" value="<%= config.email.smtp?.auth?.user || '' %>" class="input" />
        </div>
        <div>
          <label class="block text-sm font-medium">Password</label>
          <input type="password" name="config[email][smtp][auth][pass]" value="<%= config.email.smtp?.auth?.pass || '' %>" class="input" />
        </div>
      </div>
    </div>

    <h2 class="text-xl font-semibold mb-2">Game Servers</h2>
    <div id="serversContainer" class="mb-4">
      <% Object.keys(config.servers).forEach(function(key) { %>
        <fieldset class="border p-4 mb-2">
          <legend class="font-semibold">Server: <%= key %></legend>
          <input type="hidden" name="config[servers][<%= key %>][_key]" value="<%= key %>" />
          <% Object.keys(config.servers[key]).forEach(function(field) { %>
            <% if (field === 'badgeVersion') { %>
              <div>
                <label class="block text-sm font-medium">Data Version</label>
                <select name="config[servers][<%= key %>][badgeVersion]" class="input">
                  <option value="i24" <%= config.servers[key][field] === 'i24' ? 'selected' : '' %>>i24 / v2 (OuroDev)</option>
                  <option value="i25" <%= config.servers[key][field] === 'i25' ? 'selected' : '' %>>i25+ (Homecoming Based)</option>
                </select>
              </div>
            <% } else if (field === 'dbPort') { %>
              <div>
                <label class="block text-sm font-medium">dbPort</label>
                <input type="number" name="config[servers][<%= key %>][dbPort]" value="<%= config.servers[key][field] %>" class="input" min="1" max="65535" />
              </div>
            <% } else if (field === 'dbPass') { %>
              <div>
                <label class="block text-sm font-medium">dbPass</label>
                <div class="relative">
                  <input
                    type="password"
                    name="config[servers][<%= key %>][dbPass]"
                    value="<%= config.servers[key][field] %>"
                    class="input pr-12 toggle-password"
                  />
                  <button
                    type="button"
                    class="toggle-button absolute inset-y-0 right-2 flex items-center text-sm text-gray-400"
                    tabindex="-1"
                  >
                    üëÅ Show
                  </button>
                </div>
                
              </div>
            <% } else { %>
              <div>
                <label class="block text-sm font-medium"><%= field %></label>
                <input type="text" name="config[servers][<%= key %>][<%= field %>]" value="<%= config.servers[key][field] %>" class="input" />
              </div>
            <% } %>
          <% }); %>
          <button type="button" onclick="removeServer(this)" class="text-red-600">Remove Server</button>
        </fieldset>
      <% }); %>
    </div>
    <button type="button" onclick="addServer()" class="btn btn-blue mb-4">Add Server</button>

    <h2 class="text-xl font-semibold mb-2">Scheduled Tasks</h2>
    <div id="tasksContainer" class="mb-4">
      <% Object.keys(config.schedule.tasks).forEach(function(key) { %>
        <fieldset class="border p-4 mb-2">
          <legend class="font-semibold">Task: <%= key %></legend>
          <input type="hidden" name="config[schedule][tasks][<%= key %>][_key]" value="<%= key %>" />
          <% Object.keys(config.schedule.tasks[key]).forEach(function(field) { %>
            <div>
              <label class="block text-sm font-medium"><%= field %></label>
              <input type="text" name="config[schedule][tasks][<%= key %>][<%= field %>]" value="<%= config.schedule.tasks[key][field] %>" class="input" />
            </div>
          <% }); %>
          <button type="button" onclick="removeTask(this)" class="text-red-600">Remove Task</button>
        </fieldset>
      <% }); %>
    </div>
    <button type="button" onclick="addTask()" class="btn btn-blue mb-4">Add Task</button>

    <h2 class="text-xl font-semibold mb-2">Log Settings</h2>
    <div class="grid grid-cols-2 gap-4 mb-4">
      <% Object.keys(config.logs).forEach(function(key) { %>
        <div>
          <label class="block text-sm font-medium"><%= key %></label>
          <% if (key === 'compress') { %>
            <input type="checkbox" name="config[logs][compress]" value="true" <%= config.logs.compress ? 'checked' : '' %> />
          <% } else if (key === 'accessRetentionDays') { %>
            <input type="number" name="config[logs][<%= key %>]" value="<%= config.logs[key] %>" class="input" min="1" />
          <% } else { %>
            <input type="text" name="config[logs][<%= key %>]" value="<%= config.logs[key] %>" class="input" />
          <% } %>
        </div>
      <% }); %>
    </div>

    <button type="submit" class="btn btn-green">Save Config</button>
  </form>
</div>

<script>
  let serverCounter = 1000;
  let taskCounter = 1000;

  function addServer() {
    let key = prompt("Enter a unique server key (e.g. 'freedom'):");
    if (!key) return;

    if (document.querySelector(`input[name="config[servers][${key}][_key]"]`)) {
      alert(`A server with the key "${key}" already exists.`);
      return;
    }

    key = key.trim().toLowerCase();
    const label = key.charAt(0).toUpperCase() + key.slice(1);
    const container = document.getElementById('serversContainer');
    const html = `
      <fieldset class="border p-4 mb-2">
        <legend class="font-semibold">Server: ${key}</legend>
        <input type="hidden" name="config[servers][${key}][_key]" value="${key}" />
        <div><label class="block text-sm font-medium">label</label><input type="text" name="config[servers][${key}][label]" class="input" value="${label}" /></div>
        <div><label class="block text-sm font-medium">dbHost</label><input type="text" name="config[servers][${key}][dbHost]" class="input" /></div>
        <div><label class="block text-sm font-medium">dbPort</label><input type="number" name="config[servers][${key}][dbPort]" class="input" min="1" max="65535" value="1433" /></div>
        <div><label class="block text-sm font-medium">dbUser</label><input type="text" name="config[servers][${key}][dbUser]" class="input" /></div>
        <div><label class="block text-sm font-medium">dbPass</label><input type="password" name="config[servers][${key}][dbPass]" class="input" /></div>
        <div><label class="block text-sm font-medium">dbName</label><input type="text" name="config[servers][${key}][dbName]" class="input" /></div>
        <div>
          <label class="block text-sm font-medium">Data Version</label>
          <select name="config[servers][${key}][badgeVersion]" class="input">
            <option value="i24">i24 / v2 (OuroDev)</option>
            <option value="i25">i25+ (Homecoming Based)</option>
          </select>
        </div>
        <button type="button" onclick="removeServer(this)" class="text-red-600">Remove Server</button>
      </fieldset>
    `;
    container.insertAdjacentHTML('beforeend', html);
  }


  function removeServer(button) {
    button.closest('fieldset').remove();
  }

  function addTask() {
    const container = document.getElementById('tasksContainer');
    const tempKey = `task${taskCounter++}`;

    const html = `
      <fieldset class="border p-4 mb-2" data-task-key="${tempKey}">
        <legend class="font-semibold">New Task</legend>
        <div>
          <label class="block text-sm font-medium">intervalMinutes</label>
          <input type="text" name="config[schedule][tasks][${tempKey}][intervalMinutes]" class="input" />
        </div>
        <div>
          <label class="block text-sm font-medium">handler</label>
          <input type="text" name="config[schedule][tasks][${tempKey}][handler]" class="input handler-input" placeholder="e.g. updateChecker.checkForUpdates" />
        </div>
        <button type="button" onclick="removeTask(this)" class="text-red-600">Remove Task</button>
      </fieldset>
    `;

    container.insertAdjacentHTML('beforeend', html);

    const fieldset = container.querySelector(`fieldset[data-task-key="${tempKey}"]`);
    const handlerInput = fieldset.querySelector('.handler-input');

    handlerInput.addEventListener('change', () => {
      const handler = handlerInput.value.trim();
      if (!handler.includes('.')) return;

      const newKey = handler.split('.').pop();
      const inputs = fieldset.querySelectorAll('input');

      inputs.forEach(input => {
        const oldName = input.getAttribute('name');
        if (oldName) {
          const updatedName = oldName.replace(`[${tempKey}]`, `[${newKey}]`);
          input.setAttribute('name', updatedName);
        }
      });

      // Update data attribute for future safety
      fieldset.setAttribute('data-task-key', newKey);
    });
  }

  function removeTask(button) {
    button.closest('fieldset').remove();
  }
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.toggle-button').forEach(button => {
      button.addEventListener('click', () => {
        const input = button.previousElementSibling;
        if (!input || input.type !== 'password' && input.type !== 'text') return;

        if (input.type === 'password') {
          input.type = 'text';
          button.textContent = 'üëÅ Hide';
        } else {
          input.type = 'password';
          button.textContent = 'üëÅ Show';
        }
      });
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const providerSelect = document.getElementById('email-provider');
    const smtpFields = document.getElementById('smtp-fields');
    const mailerSendFields = document.getElementById('mailersend-fields');

    function updateVisibility() {
      const provider = providerSelect.value;
      smtpFields.style.display = provider === 'smtp' ? '' : 'none';
      mailerSendFields.style.display = provider === 'mailersend' ? '' : 'none';
    }

    providerSelect.addEventListener('change', updateVisibility);
    updateVisibility(); // Run once on load
  });
</script>


<style>
  .input { width: 100%; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 0.5rem; }
  .btn { padding: 0.5rem 1rem; border-radius: 4px; font-weight: bold; }
  .btn-blue { background: #3b82f6; color: white; }
  .btn-green { background: #10b981; color: white; }
  label { margin-bottom: 0.25rem; display: block; }
  fieldset > div { margin-bottom: 0.5rem; }
  .input.toggle-password {
    padding-right: 3rem; /* Space for the toggle button */
  }
</style>