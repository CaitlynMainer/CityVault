<% const isForced = typeof forcedAccess !== 'undefined' && forcedAccess; %>
<% const isAllowed = typeof character !== 'undefined' && character !== null; %>
<% if (isAllowed || isForced) { %>
  <% if (message) { %>
    <div class="rounded px-4 py-3 mb-5 text-sm font-medium bg-yellow-100 text-yellow-900 dark:bg-yellow-800 dark:text-yellow-100">
      <span class="font-paragon"><%= message %></span>
    </div>
  <% } %>
  <% if (isForced) { %>
    <div class="alert">This character is part of a private profile. Displaying because you are an admin.</div>
  <% } %>
  	<script>
	  function handlePortraitError(img) {
		const originalSrc = img.src;
		img.onerror = null; // prevent loop
		img.src = '/images/portrait/rendering.jpg';
		retryPortrait(img, originalSrc);
	  }

	  function retryPortrait(img, originalSrc) {
		let retries = 0;
		const maxRetries = 10;
		const delay = 3000; // 3 seconds

		const tryReload = () => {
		  fetch(originalSrc, { method: 'HEAD', cache: 'no-cache' }).then(res => {
			if (res.ok) {
			  img.src = originalSrc + '&retry=' + Date.now(); // cache-bust
			  img.style.display = 'block';
			} else if (++retries < maxRetries) {
			  setTimeout(tryReload, delay);
			} else {
			  console.warn('Portrait still not available after retries.');
			}
		  }).catch(() => {
			if (++retries < maxRetries) {
			  setTimeout(tryReload, delay);
			}
		  });
		};

		tryReload();
	  }
	</script>
  <div class="character-profile-container">
    <!-- Left Column: Character Summary -->
    <div class="left-panel" style="flex: 0 0 360px;">
		<% if (isAdmin || isGM || viewerIsOwner) { %>
		  <div style="display: grid; grid-template-columns: repeat(2, auto); gap: 8px; justify-content: center; margin-top: 8px;">
			<form method="POST" action="/clear-costume-render" style="margin: 0;">
			  <input type="hidden" name="serverKey" value="<%= serverKey %>">
			  <input type="hidden" name="containerId" value="<%= character.ContainerId %>">
			  <input type="hidden" name="slot" value="<%= character.CurrentCostume || 0 %>">
			  <button type="submit" class="btn btn-red text-xs px-2 py-1" onclick="return confirm('Are you sure you want to clear this render?')">
				<span class="font-paragon">Clear Render</span>
			  </button>
			</form>

			<form method="POST" action="/character/deletePortrait" style="margin: 0;">
			  <input type="hidden" name="characterId" value="<%= serverKey %>:<%= character.ContainerId %>">
			  <button type="submit" class="btn btn-red text-xs px-2 py-1" onclick="return confirm('Delete your custom portrait?')">
				<span class="font-paragon">Delete Portrait</span>
			  </button>
			</form>
		  </div>
		<% } %>
		
		<br>
		
		<div style="display: flex;
		justify-content: center;
		background-image: url('/<%= bgPath %>');
		background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
			">
		  <img id="portrait"
			   src="/images/portrait/<%= serverKey %>_<%= character.ContainerId %><%= character.CurrentCostume && character.CurrentCostume !== 0 ? `_${character.CurrentCostume}` : '' %>.png?v=<%= Date.now() %>"
			   onerror="handlePortraitError(this)"
			   alt="Character Portrait"
			   style="max-width: 200px; max-height: 400px; width: auto; height: auto; border-radius: 8px; margin-bottom: 8px;" />
		</div>
		<% if (viewerIsOwner) { %>
		  <form action="/character/uploadPortrait" method="post" enctype="multipart/form-data" style="display: flex; align-items: center; justify-content: center; gap: 6px; margin-top: 8px;">
			<input type="hidden" name="characterId" value="<%= serverKey %>:<%= character.ContainerId %>">
			<input type="file" name="portrait" accept="image/*" required style="font-size: 0.75rem; padding: 2px;">
			<button type="submit" class="btn btn-blue text-xs px-2 py-1">Upload</button>
		  </form>
		<% } %>
      <div style="display: flex; justify-content: center; gap: 8px; margin-bottom: 12px;">
        <img src="/images/icons/<%= character.alignment.toLowerCase() %>.png" alt="Alignment" title="<%= character.alignment %>" height="32" />
        <img src="/images/icons/<%= character.OriginName.toLowerCase() %>.png" alt="Origin" title="<%= character.OriginName %>" height="32" />
        <img src="/images/icons/<%= character.ClassName.toLowerCase() %>.png" alt="Archetype" title="<%= character.ClassName %>" height="32" />
      </div>

<div class="grid grid-cols-1 sm:grid-cols-2 gap-y-2 gap-x-4 text-sm leading-relaxed max-w-2xl">
  <div class="font-bold font-paragon">Title:</div>
  <div><%= character.DisplayTitle || '(None)' %></div>

  <div class="font-bold font-paragon">Supergroup:</div>
  <div>
    <% if (character.SupergroupLink) { %>
      <a href="/supergroup/<%= serverKey %>:<%= character.SupergroupLink.id %>" 
         class="underline text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition">
         <%= stringClean(character.SupergroupLink.name) %>
      </a>
    <% } else { %>(None)<% } %>
  </div>

  <div class="font-bold font-paragon">Archetype:</div>
  <div><%= character.ClassName %></div>

  <div class="font-bold font-paragon">Primary:</div>
  <div><%= character.PrimaryPowerset %></div>

  <div class="font-bold font-paragon">Secondary:</div>
  <div><%= character.SecondaryPowerset %></div>

  <div class="font-bold font-paragon">Pools:</div>
  <div><%= character.Pools.join(', ') %></div>

  <div class="font-bold font-paragon">Ancillary Pool:</div>
  <div><%= character.AncillaryPools.join(', ') %></div>

  <div class="font-bold font-paragon">XP Level:</div>
  <div><%= character.Level %></div>

  <div class="font-bold font-paragon">Experience:</div>
  <div><%= character.Experience.toLocaleString() %></div>

  <div class="font-bold font-paragon">Influence:</div>
  <div><%= character.Influence.toLocaleString() %></div>

  <div class="font-bold font-paragon">Last Seen:</div>
  <div><%= character.LastSeen %></div>

  <div class="font-bold font-paragon">Created:</div>
  <div><%= character.Created %></div>

  <div class="font-bold font-paragon">Login Count:</div>
  <div><%= character.LoginCount %></div>

  <div class="font-bold font-paragon">Total Time Played:</div>
  <div><%= character.TotalTimePlayed %></div>

  <div class="font-bold font-paragon">Global:</div>
  <div>
    <% if (character.globalHandle) { %>
      <a href="/profile/<%= character.AuthId %>" 
         class="underline text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition">
         @<%= stringClean(character.globalHandle) %>
      </a>
    <% } else { %>(Unknown)<% } %>
  </div>

  <div class="font-bold font-paragon">Access Level:</div>
  <div>
    <% if (role === 'admin') { %>
      <form action="/admin/updateAccessLevel" method="post" class="inline"
            onsubmit="return confirm('Are you sure you want to change this character’s access level?');">
        <input type="hidden" name="serverKey" value="<%= serverKey %>">
        <input type="hidden" name="containerId" value="<%= character.ContainerId %>">
        <select name="accessLevel" 
                onchange="this.form.requestSubmit()" 
                class="bg-gray-700 text-white p-1 rounded">
          <% for (let i = 0; i <= 11; i++) { %>
            <option value="<%= i %>" <%= character.AccessLevel === i ? 'selected' : '' %>><%= i %></option>
          <% } %>
        </select>
      </form>
    <% } else { %>
      <%= character.AccessLevel ?? 0 %>
    <% } %>
  </div>
</div>

    </div>

    <!-- Right Column: Character Name, Bio, and Badges -->
    <div class="right-panel" style="flex: 1; max-width: 720px;">
	  <h1 class="text-3xl font-bold mb-4"><%= stringClean(character.Name) %></h1>
      <p><strong><span class="font-paragon">Player:</span></strong>          <% if (character.globalHandle) { %>
            <a href="/profile/<%= character.AuthId %>" 
              class="underline text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition">
              @<%= stringClean(character.globalHandle) %>
            </a>
          <% } else { %>
            (Unknown)
          <% } %></p>

      <div style="margin: 12px 0;">
        <strong><span class="font-paragon">Description:</span></strong><br />
        <p style="white-space: pre-wrap;"><%- stringClean(character.Description) %></p>
      </div>

	  <h2 class="text-xl font-bold mb-2"><span class="font-paragon">Badge Tracking</span></h2>
      <div style="margin: 24px 0;">
        <div style="margin-top: 4px; text-align: center; font-size: 14px;">
          <div class="text-lg text-center">
            <strong><%= stringClean(character.Name) %></strong> has collected
            <strong><%= ownedBadges %></strong> of
            <strong><%= totalBadges %></strong> badges.
          </div>
        </div>
        <div style="background: #ccc; border-radius: 4px; height: 12px; overflow: hidden;">
          <div style="background: linear-gradient(to right, orange, gold); width: <%= Math.floor((ownedBadges / totalBadges) * 100) %>%; height: 100%;"></div>
        </div>
      </div>
      <br>

      <% badgeCategoryList.forEach(category => { %>
        <h3 class="text-lg font-semibold"><span class="font-paragon"><%= category.name %></span></h3>
        <div style="margin-bottom: 8px;">
          <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 4px;">
            <div style="flex: 1; background: #ccc; height: 16px; border-radius: 4px; margin-right: 8px;">
              <div style="background: linear-gradient(to right, orange, gold); width: <%= Math.floor((category.owned / category.total) * 100) %>%; height: 100%; border-radius: 4px;"></div>
            </div>
            <div style="white-space: nowrap; font-size: 14px;">
              <%= category.owned %> of <%= category.total %> badges earned
            </div>
          </div>
          <a href="#" onclick="toggleBadges('<%= category.name %>'); return false;">Toggle Details</a>
        </div>
        <ul id="details-<%= category.name %>" class="badge-list" style="display: none;" data-badges="<%= encodeURIComponent(JSON.stringify(category.badges)) %>">
          <li class="loading-spinner">Loading...</li>
        </ul>
      <% }) %>
      
      <br>
      
      <h2 class="text-xl font-bold mb-2"><span class="font-paragon">Unearned but Eligible Badges</span></h2>
      <% unearnedBadgeCategories.forEach(category => { %>
        <h3 class="text-lg font-semibold"><span class="font-paragon"><%= category.name %></span></h3>
        <div style="margin-bottom: 8px;">
          <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 4px;">
            <div style="flex: 1; background: #ccc; height: 16px; border-radius: 4px; margin-right: 8px;">
              <div style="background: linear-gradient(to right, #666, #999); width: 0%; height: 100%; border-radius: 4px;"></div>
            </div>
            <div style="white-space: nowrap; font-size: 14px;">
              0 of <%= category.count %> badges earned
            </div>
          </div>
          <a href="#" onclick="toggleBadges('unearned-<%= category.name %>'); return false;">Toggle Details</a>
        </div>
        <ul id="details-unearned-<%= category.name %>" class="badge-list" style="display: none;" data-badges="<%= encodeURIComponent(JSON.stringify(category.badges)) %>">
          <li class="loading-spinner">Loading...</li>
        </ul>
      <% }) %>
    </div>
  </div>
<% } else { %>
  <div class="alert"><%= message %></div>
<% } %>
    <script>
 function toggleBadges(categoryName) {
  const container = document.getElementById(`details-${categoryName}`);
  if (!container) return;

  if (container.style.display === 'none') {
    container.style.display = 'block';

    if (!container.dataset.loaded) {
      const raw = container.dataset.badges;
      const badges = JSON.parse(decodeURIComponent(raw));
      container.innerHTML = '';

for (const badge of badges) {
  const li = document.createElement('li');
  li.className = 'badge-tile';

  // Top row: [✅] [Icon] [Title] [ⓘ]
  const topRow = document.createElement('div');
  topRow.className = 'badge-top-row';

  // Status ✅/❌
  const status = document.createElement('span');
  status.className = 'badge-status';
  status.textContent = badge.owned ? '✅' : '❌';
  topRow.appendChild(status);

  // Icon
  const img = document.createElement('img');
  img.src = `/images/badges/${badge.Icon || 'unknown'}.png`;
  img.alt = badge.DisplayTitle || badge.Name;
  img.className = 'badge-icon';
  topRow.appendChild(img);

  // Title text
  const nameText = document.createElement('span');
  nameText.textContent = badge.DisplayTitle || badge.Name;
  nameText.className = 'badge-name';
  topRow.appendChild(nameText);

  // Info toggle (optional)
  let desc;
  if (badge.DisplayText || badge.DisplayTextVillain) {
    const btn = document.createElement('button');
    btn.textContent = 'ⓘ';
    btn.className = 'badge-toggle-btn';
    btn.onclick = () => desc.classList.toggle('hidden');
    topRow.appendChild(btn);
  }

  // Add the row
  li.appendChild(topRow);

  // Optional: Description row
  if (badge.DisplayText || badge.DisplayTextVillain) {
    desc = document.createElement('div');
    desc.className = 'badge-description hidden';
    desc.textContent = badge.DisplayText || badge.DisplayTextVillain;
    li.appendChild(desc);
  }

  container.appendChild(li);
}


      container.dataset.loaded = 'true';
    }
  } else {
    container.style.display = 'none';
  }
}

    </script>
